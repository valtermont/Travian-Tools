/* Resource Task Creation */
CREATE TABLE RESOURCE_TASKS(
	SERVER_ID VARCHAR(255),					-- SERVER ID
	GROUP_ID VARCHAR(55),					-- GROUP ID in the Plus
	RESOURCE_TASK_ID VARCHAR(255) UNIQUE NOT NULL,			-- Unique Task ID
	TASK_STATUS ENUM ('ACTIVE', 'COMPLETE','DELETE'),	-- STATUS ACTIVE = Visible to all, COMPELETED = Visible to leaders, DELETE = Deleted from list for all
	RESOURCES_AMOUNT_TOTAL INT(11),			-- Total resources needed
	RESOURCES_TYPE ENUM ('WOOD','CLAY','IRON','CROP','ANY'),	-- Preference of resources to be sent
	RESOURCES_RECEIVED INT(11),				-- total received so far
	RESOURCES_RECEIVED_PERCENTAGE VARCHAR(10),	-- total remaninig resources
	RESOURCES_REMAINING INT(11),				-- total remaninig resources
	RESOURCES_VILLAGE_X INT(11),			-- Village X coordinate
	RESOURCES_VILLAGE_Y INT(11),			-- Village Y Coordinate
	RESOURCES_VILLAGE_NAME VARCHAR(55),		-- village name
	RESOURCES_PLAYER_NAME VARCHAR(55),		-- Player name
	CREATED_BY VARCHAR(55),					-- Task creator ID
	TASK_COMMENTS VARCHAR(100),				-- Comments regarding task - visible to the users
	FOREIGN KEY (SERVER_ID) REFERENCES TRAVIAN_SERVERS (SERVER_ID)
	/*FOREIGN KEY (GROUP_ID) REFERENCES PLUS_SUBSCRIPTION_DETAILS (GROUP_ID)*/
);

/* Resource Task Creation */
CREATE TABLE PLAYER_RESOURCE_UPDATE(
	SERVER_ID VARCHAR(255),					-- SERVER ID
	GROUP_ID VARCHAR(55),					-- GROUP ID in the Plus
	RESOURCE_TASK_ID VARCHAR(255) NOT NULL,			-- Unique Task ID
	ACCOUNT_ID VARCHAR(255),				-- ACCOUNT_ID of the player pushing resources
	PLAYER VARCHAR(50),						-- PLAYER NAME on the server
	RESOURCES_PUSHED INT(11),				-- Resources pushed by the player
	RESOURCES_PUSHED_PERCENTAGE	VARCHAR(10),	-- Percentage of resources pushed by the player.	
	FOREIGN KEY (SERVER_ID) REFERENCES TRAVIAN_SERVERS (SERVER_ID),
	FOREIGN KEY (ACCOUNT_ID) REFERENCES PROFILE_LOGIN_DATA (ACCOUNT_ID)	
);

/* Defense Calls */
CREATE TABLE DEFENSE_TASKS(
	SERVER_ID VARCHAR(255),			-- Server ID
	GROUP_ID VARCHAR(255),			-- Group ID
	DEFENSE_CALL_ID VARCHAR(255) UNIQUE NOT NULL,	-- Defense Call ID
	DEFENSE_VILLAGE_X INT(11),		-- X coordinate
	DEFENSE_VILLAGE_Y INT(11),		-- Y Coordinate
	DEFENSE_NEEDED INT(11),			-- Amount of defense needed in crop
	DEFENSE_LAND_TIME VARCHAR(55),	-- Landing time of Defense	
	DEFENSE_TYPE ENUM('DEFEND','SNIPE','STAND','INSERT'),	-- Type of defense
	DEFENSE_PRIORITY ENUM('HIGH','MEDIUM','LOW'),			-- Priority of the Defense
	DEFENSE_STATUS ENUM('ACTIVE','COMPLETE','DELETE'),		-- Defense status
	DEFENSE_CROP ENUM('YES','NO'),	-- Crop needed for the CFD
	DEFENSE_RECEIVED INT(11),		-- Amount of defense received at the moment
	DEFENSE_REMAINING INT(11),		-- Remaining Defense
	DEFENSE_RECEIVED_PERCENTAGE VARCHAR(55),		-- Percentage of defense received	
	DEFENSE_VILLAGE_NAME VARCHAR(55),				-- Name of the Defending Village
	DEFENSE_PLAYER_NAME VARCHAR(55),				-- Name of the Player of defending village
	COMMENTS VARCHAR(255),							-- Comments from the CFD
	CALL_CREATE_BY VARCHAR(55),						-- CFD created by
	CALL_CREATE_DATE VARCHAR(55),					-- CFD Create Date
	CALL_UPDATE_BY VARCHAR(55),						-- CFD last updated by
	CALL_UPDATE_DATE VARCHAR(55),					-- CFD last update date
	FOREIGN KEY (SERVER_ID) REFERENCES TRAVIAN_SERVERS (SERVER_ID)	
);

/* Resource Task Creation */
CREATE TABLE PLAYER_DEFENSE_UPDATE(
	SERVER_ID VARCHAR(255),					-- SERVER ID
	GROUP_ID VARCHAR(55),					-- GROUP ID in the Plus
	DEFENSE_CALL_ID VARCHAR(255) NOT NULL,			-- Unique Task ID
	PROFILE_ID VARCHAR(255),				-- ACCOUNT_ID of the player pushing resources
	PLAYER VARCHAR(50),						-- PLAYER NAME on the server
	VILLAGE_NAME VARCHAR(55),				-- Defense providing village name
	VILLAGE_VID INT(11),					-- VID of the provider village
	DEFENSE_LANDING_TIME VARCHAR(55),		-- Defense landing time
	RESOURCES_PUSHED INT(11),				-- Resources pushed by the player	
	HERO_SENT ENUM('YES','NO'),				-- If hero is being sent with the defense
	TRIBE_ID INT(2),		-- tribe of the player providing defense
	UNIT_01 INT(10),		-- Units Count
	UNIT_02 INT(10),		-- Units values get pulled from the units meta data
	UNIT_03 INT(10),		-- Calcualte the other values based on the tribe_id of the player.	
	UNIT_04 INT(10),
	UNIT_05 INT(10),
	UNIT_06 INT(10),
	UNIT_07 INT(10),
	UNIT_08 INT(10),
	UNIT_09 INT(10),
	UNIT_10 INT(10),
	TROOPS_CONS INT(11),	-- Units Consumption
	UNIT_INF_DEFENSE INT(11),	-- Total Infantry Defense
	UNIT_CAV_DEFENSE INT(11),	-- Total Cavalry Defense
	FOREIGN KEY (SERVER_ID) REFERENCES TRAVIAN_SERVERS (SERVER_ID),
	FOREIGN KEY (DEFENSE_CALL_ID) REFERENCES DEFENSE_TASKS(DEFENSE_CALL_ID) 	
);


/* OPS PLANS */
CREATE TABLE OFFENSE_PLANS(
	SERVER_ID VARCHAR(255) NOT NULL,				
	GROUP_ID VARCHAR (255) NOT NULL,
	OFFENSE_PLAN_ID VARCHAR (255) NOT NULL UNIQUE,
	OFFENSE_PLAN_NAME VARCHAR(55),
	PLAN_STATUS ENUM ('DRAFT','ACTIVE','INPROGRESS','COMPLETED','ARCHIVE'),	
	PLAN_DETAILS VARCHAR(255),
	PLAN_CREATE_BY VARCHAR(55),
	PLAN_CREATE_DATE VARCHAR(55),
	PLAN_UPDATE_BY VARCHAR(55),
	PLAN_UPDATE_DATE VARCHAR(55),
	PLAN_LOCK BOOLEAN DEFAULT TRUE,
	PLAN_LOCK_ID VARCHAR(55),
	FOREIGN KEY (SERVER_ID) REFERENCES TRAVIAN_SERVERS (SERVER_ID)
);

/* OPS Details */
CREATE TABLE OFFENSE_TASKS(
	OFFENSE_PLAN_ID VARCHAR(255) NOT NULL,
	OFFENSE_WAVE_ID VARCHAR(255) NOT NULL UNIQUE,
	ATT_TYPE ENUM ('REAL','FAKE','OTHER'),
	ATT_PROFILE_ID VARCHAR(55),
	ATT_PLAYER VARCHAR (50),
	ATT_VILLAGE VARCHAR(55),
	ATT_VILLAGE_X INT(5),
	ATT_VILLAGE_Y INT(5),
	ATT_WAVES INT (5),
	ATT_UNIT VARCHAR (5),
	ATT_LAND_TIME VARCHAR(55),
	ATT_START_TIME VARCHAR(55),
	ATT_STATUS ENUM ('PENDING','LAUNCHED'),
	ATT_COMMENTS VARCHAR(55),
	TAR_PLAYER VARCHAR(50),
	TAR_VILLAGE VARCHAR(55),
	TAR_VILLAGE_X INT(5),
	TAR_VILLAGE_Y INT(5),
	PLAYER_COMMENTS VARCHAR(55),
	PLAN_REPORT VARCHAR(255),
	FOREIGN KEY (OFFENSE_PLAN_ID) REFERENCES OFFENSE_PLANS(OFFENSE_PLAN_ID) 
);

/* Offense Planner */
CREATE TABLE OFFENSE_PLANNER(
	OFFENSE_PLAN_ID VARCHAR(255) NOT NULL,
	PLAN_PLAYER VARCHAR(55),
	PLAN_VILLAGE VARCHAR(55),
	PLAN_VID INT(11) UNIQUE NOT NULL,
	PLAYER_TYPE ENUM ('TARGET','HAMMER'),
	VILLAGE_X INT(5),
	VILLAGE_Y INT(5),
	WAVES_REAL INT(3),
	WAVES_FAKE INT(3),
	WAVES_OTHER INT(3),
	FOREIGN KEY (OFFENSE_PLAN_ID) REFERENCES OFFENSE_PLANS(OFFENSE_PLAN_ID) 
);


















